trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  NODE_VERSION: '20.x'

steps:
  - checkout: self
    fetchDepth: 1

  - task: NodeTool@0
    inputs:
      versionSpec: $(NODE_VERSION)
    displayName: 'Use Node.js $(NODE_VERSION)'

  - task: Cache@2
    inputs:
      key: 'npm | "$(Agent.OS)" | package-lock.json'
      path: '$(Pipeline.Workspace)/.npm'
      cacheHitVar: 'NpmCacheRestored'
    displayName: 'Cache NPM'

  - script: |
      npm ci --cache $(Pipeline.Workspace)/.npm --prefer-offline
    displayName: 'Install dependencies'

  - script: |
      npx playwright install --with-deps
    displayName: 'Install Playwright browsers'

  - script: |
      mkdir -p reports/junit reports/html
    displayName: 'Prepare report folders'

  - script: |
      echo "BASE_URL=$(BASE_URL)"
      npm run test:all
    displayName: 'Run Playwright tests'
    env:
      BASE_URL: $(BASE_URL)

  - task: PublishTestResults@2
    displayName: 'Publish JUnit test results'
    condition: always()                # run even if tests fail
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'reports/junit/**/*.xml'
      testRunTitle: 'Playwright tests'
      failTaskOnFailedTests: false

  - task: PublishBuildArtifacts@1
    displayName: 'Publish HTML report artifact'
    condition: always()                # run even if tests fail
    inputs:
      PathtoPublish: 'reports/html'
      ArtifactName: 'PlaywrightHtmlReport'
      publishLocation: 'Container'

  - script: |
      SUMMARY="$(Build.SourcesDirectory)/summary.md"
      echo "# Playwright Test Report" > "$SUMMARY"
      echo "" >> "$SUMMARY"
      echo "Find the full HTML report in the **PlaywrightHtmlReport** artifact." >> "$SUMMARY"
      echo "" >> "$SUMMARY"
      echo "If tests failed, check the **Attachments** for traces and videos." >> "$SUMMARY"
      echo "" >> "$SUMMARY"
      echo "BASE_URL used: $(BASE_URL)" >> "$SUMMARY"
      echo "Project: $(Build.Repository.Name)" >> "$SUMMARY"
      echo "Build: $(Build.BuildNumber)" >> "$SUMMARY"
      echo "Date: $(Build.QueuedDate)" >> "$SUMMARY"
      echo "Agent: $(Agent.OS)" >> "$SUMMARY"
      echo "Node: $(NODE_VERSION)" >> "$SUMMARY"
      if [ -f "$SUMMARY" ]; then
        echo "##vso[task.uploadsummary]$SUMMARY"
      else
        echo "Summary file was not created"; exit 1
      fi
    displayName: 'Attach summary to pipeline'
    condition: always()                # run even if tests fail
